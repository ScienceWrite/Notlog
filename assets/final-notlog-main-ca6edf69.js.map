{"version":3,"file":"final-notlog-main-ca6edf69.js","sources":["../../src/final-notlog-main.ts"],"sourcesContent":["/// <reference types=\"@workadventure/iframe-api-typings\" />\nimport { bootstrapExtra } from \"@workadventure/scripting-api-extra\";\nimport { checkPlayerMaterial, mySound, playRandomSound } from \"./footstep\";\nimport { getChatAreas } from \"./chatArea\";\nimport { quests, levelUp } from \"./quests\";\n\nWA.onInit().then(async () => {\n    console.log('loading main.ts');\n    WA.controls.disableInviteButton();\n    WA.controls.disableMapEditor();\n    WA.controls.disableRoomList();\n\n    try {\n        // Initialize the Scripting API Extra\n        await bootstrapExtra();\n        console.log('Scripting API Extra ready');\n    } catch (e) {\n        console.error(e);\n    }});\n  WA.onInit().then(async () => {\n    // Get chat areas and set up event listeners for entering and leaving them\n    const chatAreas = await getChatAreas();\n    for (const area of chatAreas) {\n        let triggerMessage: any;\n        let playerName: string = WA.player.name;\n        console.log(\"Player name:\", playerName);\n        // When player enters a chat area\n        WA.room.area.onEnter(area.name).subscribe(() => {\n            triggerMessage = WA.ui.displayActionMessage({\n                message: `[LEERTASTE] drÃ¼cken um mit ${area.npcName} zu sprechen.`,\n                callback: () => {\n\n                    \n                    WA.chat.sendChatMessage(area.chatText.replace(\"{NameOfPlayer}\", playerName),area.npcName);\n                    if (area.triggerQuest) {\n                        const currentQuest = WA.player.state.currentQuest;\n                        const requiredQuest = quests.find((q: { questId: string }) => q.questId === area.triggerQuest)?.requireQuest;\n                        if (currentQuest === requiredQuest) {\n                            WA.player.state.currentQuest = area.triggerQuest;\n                        }\n                    }\n                }\n            });\n            WA.room.area.onLeave(area.name).subscribe(() => {WA.chat.close();});\n        \n        });\n\n        // When player leaves a chat area\n        WA.room.area.onLeave(area.name).subscribe(() => {\n            if (triggerMessage) {\n                triggerMessage.remove();\n                WA.chat.close();\n            }\n        });\n    }\n    \n    // Event listener for player movement to play footstep sounds\n    WA.player.onPlayerMove(async ({ x, y, moving }) => {\n        const material = await checkPlayerMaterial({ x, y });\n        if (!material) {\n            mySound?.stop();\n            return;\n        }\n\n        if (!moving && !material) {\n            mySound?.stop();\n            return;\n        } else {\n            mySound?.stop();\n            playRandomSound(material);\n        }\n    });\n\n   \n    // Display the current quest banner if a quest is active\n    const currentQuestId = WA.player.state.currentQuest;\n    const currentQuest = quests.find((q: { questId: string }) => q.questId === currentQuestId);\n    if (currentQuest) {\n        createQuestBanner(currentQuest.questId);\n    }\n\n    // Event listener for changes in the current quest\n    WA.player.state.onVariableChange('currentQuest').subscribe((newQuestId) => {\n        levelUp(\"notlog\", 10);\n        const newQuest = quests.find((q: { questId: string }) => q.questId === newQuestId);\n        if (newQuest) {\n            createQuestBanner(newQuest.questId);\n        }\n    });\n\n    // Function to create a quest banner\n    function createQuestBanner(questId: string) {\n        const quest = quests.find((q: { questId: string }) => q.questId === questId);\n        if (quest) {\n            WA.ui.banner.openBanner({\n                id: quest.questId,\n                text: quest.questDescription,\n                bgColor: '#1B1B29',\n                textColor: '#FFFFFF',\n                timeToClose: 0,\n                closable: false\n            });\n        }\n    }\n});\n\n\n\nexport {};\n\n"],"names":["bootstrapExtra","e","chatAreas","getChatAreas","area","triggerMessage","playerName","currentQuest","requiredQuest","_a","quests","q","x","y","moving","material","checkPlayerMaterial","mySound","_b","_c","playRandomSound","currentQuestId","createQuestBanner","newQuestId","levelUp","newQuest","questId","quest"],"mappings":"mFAMA,GAAG,OAAA,EAAS,KAAK,SAAY,CACzB,QAAQ,IAAI,iBAAiB,EAC7B,GAAG,SAAS,sBACZ,GAAG,SAAS,mBACZ,GAAG,SAAS,kBAER,GAAA,CAEA,MAAMA,EAAe,EACrB,QAAQ,IAAI,2BAA2B,QAClCC,EAAG,CACR,QAAQ,MAAMA,CAAC,CACnB,CAAC,CAAC,EACJ,GAAG,OAAA,EAAS,KAAK,SAAY,CAErB,MAAAC,EAAY,MAAMC,IACxB,UAAWC,KAAQF,EAAW,CACtB,IAAAG,EACAC,EAAqB,GAAG,OAAO,KAC3B,QAAA,IAAI,eAAgBA,CAAU,EAEtC,GAAG,KAAK,KAAK,QAAQF,EAAK,IAAI,EAAE,UAAU,IAAM,CAC3BC,EAAA,GAAG,GAAG,qBAAqB,CACxC,QAAS,8BAA8BD,EAAK,OAAO,gBACnD,SAAU,IAAM,OAIZ,GADG,GAAA,KAAK,gBAAgBA,EAAK,SAAS,QAAQ,iBAAkBE,CAAU,EAAEF,EAAK,OAAO,EACpFA,EAAK,aAAc,CACbG,MAAAA,EAAe,GAAG,OAAO,MAAM,aAC/BC,GAAgBC,EAAAC,EAAO,KAAMC,GAA2BA,EAAE,UAAYP,EAAK,YAAY,IAAvE,YAAAK,EAA0E,aAC5FF,IAAiBC,IACd,GAAA,OAAO,MAAM,aAAeJ,EAAK,aAE5C,CACJ,CAAA,CACH,EACD,GAAG,KAAK,KAAK,QAAQA,EAAK,IAAI,EAAE,UAAU,IAAM,CAAC,GAAG,KAAK,OAAM,CAAG,CAAA,CAErE,EAGD,GAAG,KAAK,KAAK,QAAQA,EAAK,IAAI,EAAE,UAAU,IAAM,CACxCC,IACAA,EAAe,OAAO,EACtB,GAAG,KAAK,QACZ,CACH,CACL,CAGA,GAAG,OAAO,aAAa,MAAO,CAAE,EAAAO,EAAG,EAAAC,EAAG,OAAAC,KAAa,WAC/C,MAAMC,EAAW,MAAMC,EAAoB,CAAE,EAAAJ,EAAG,EAAAC,CAAG,CAAA,EACnD,GAAI,CAACE,EAAU,EACXN,EAAAQ,IAAA,MAAAR,EAAS,OACT,MACJ,CAEI,GAAA,CAACK,GAAU,CAACC,EAAU,EACtBG,EAAAD,IAAA,MAAAC,EAAS,OACT,MAAA,MAEAC,EAAAF,IAAA,MAAAE,EAAS,OACTC,EAAgBL,CAAQ,CAC5B,CACH,EAIK,MAAAM,EAAiB,GAAG,OAAO,MAAM,aACjCd,EAAeG,EAAO,KAAMC,GAA2BA,EAAE,UAAYU,CAAc,EACrFd,GACAe,EAAkBf,EAAa,OAAO,EAI1C,GAAG,OAAO,MAAM,iBAAiB,cAAc,EAAE,UAAWgB,GAAe,CACvEC,EAAQ,SAAU,EAAE,EACpB,MAAMC,EAAWf,EAAO,KAAMC,GAA2BA,EAAE,UAAYY,CAAU,EAC7EE,GACAH,EAAkBG,EAAS,OAAO,CACtC,CACH,EAGD,SAASH,EAAkBI,EAAiB,CACxC,MAAMC,EAAQjB,EAAO,KAAMC,GAA2BA,EAAE,UAAYe,CAAO,EACvEC,GACG,GAAA,GAAG,OAAO,WAAW,CACpB,GAAIA,EAAM,QACV,KAAMA,EAAM,iBACZ,QAAS,UACT,UAAW,UACX,YAAa,EACb,SAAU,EAAA,CACb,CAET,CACJ,CAAC"}